# Used for docker-compose.prod-test.yml. Just do TLS wrapping and leave
# the rest to the Nginx instance included in the prod image.

server {
    listen       80;
    server_name  _;

    return 302 https://$host$request_uri;
}

server {
    listen       443 ssl;
    http2 on;
    server_name  _;

    ssl_certificate     /etc/nginx/site.crt;
    ssl_certificate_key /etc/nginx/site.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    # ssl_dhparam /etc/nginx/dhparam.pem;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
    ssl_ecdh_curve secp384r1;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    # These don't make sense in a dev context
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # resolver 1.1.1.1 8.8.8.8 valid=300s;
    # resolver_timeout 5s;

    # Hide the Nginx version from headers+error pages
    server_tokens off;

    error_log /dev/stdout info;
    # DEV These are annoying in docker-compose output
    access_log off;

    # DEV:
    location /maildev {
        proxy_redirect off;
        proxy_buffering on;

        proxy_pass http://maildev_server;
    }

    # Send everything else to Django by default
    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto "https";
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://django_server;
    }
}

upstream django_server {
    server backend_prod:80 fail_timeout=0;
}

upstream maildev_server {
    server mail:80 fail_timeout=0;
}
